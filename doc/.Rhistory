res_cv[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(0.01, 0.05, 0.1, 0.2, 0.3),
maxdepth = c(10, 20, 30)
)
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("n.trees = ", hyper_grid_trees$cp[i], ",
shrinkage = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
# create data frame to organize results
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
colnames(res_cv_trees_high) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
cv_results_trees_high
res_cv_trees_high
# look at top 5 models with highest AUC
cv_results_trees_high[order(cv_results_trees_high$mean_AUC, decreasing = TRUE), ][1:5, ]
ggplot(
trees_cv_results, aes(as.factor(maxdepth), as.factor(cp), fill = mean_error)) +
geom_tile()+
labs(title="Mean Error Heatmap for tree models", y = "cp", x = "maxdepth")
ggplot(cv_results_trees_high, aes(as.factor(maxdepth), as.factor(cp), fill = mean_error)) +
geom_tile() + labs(title="Mean Error Heatmap for tree models", y = "cp", x = "maxdepth")
ggplot(
cv_results_trees_high, aes(as.factor(maxdepth), as.factor(cp), fill = mean_AUC)) +
geom_tile() + labs(title="Mean AUC Heatmap for tree models", y = "cp", x = "maxdepth")
source
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("n.trees = ", hyper_grid_trees$cp[i], ",
shrinkage = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
res_cv_trees_high
prob_pred
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
dim(feature_train_high)
dim(df_high)
label_train_high = df_high[, 2]
label_train_high
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
res_cv_trees_high
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("n.trees = ", hyper_grid_trees$cp[i], ",
shrinkage = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
res_cv_trees_high
# create data frame to organize results
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
colnames(res_cv_trees_high) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
cv_results_trees_high
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("n.trees = ", hyper_grid_trees$cp[i], ",
shrinkage = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
# create data frame to organize results
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
colnames(res_cv_trees_high) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
cv_results_trees_high
knitr::opts_chunk$set(echo = TRUE)
setwd("~/GitHub/Fall2020-Project4-group-4/doc")
df_high <- read.csv("../data/highDim_dataset.csv")
df_low <- read.csv("../data/lowDim_dataset.csv")
packages.used <- c("ggplot2", "WeightedROC", "rpart")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(ggplot2)
library(WeightedROC)
library(rpart)
K <- 5  # number of CV folds
sample.reweight <- TRUE # run sample reweighting in model training
run.cv.trees_high <- TRUE # run cross-validation on the training set for trees
run.train.trees_high <- TRUE # run evaluation on entire train set
run.test.trees_high <- TRUE # run evaluation on an independent test set
run.cv.trees_high <- TRUE # run cross-validation on the training set for trees
run.train.trees_high <- TRUE # run evaluation on entire train set
run.test.trees_high <- TRUE # run evaluation on an independent test set
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(0.01, 0.05, 0.1, 0.2, 0.3),
maxdepth = c(10, 20, 30)
)
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
features = df_high[, -1:-2]
labels = df_high[, 2]
reweight = TRUE
cp = 0.05
maxdepth = 10
u = 1
i = 1
set.seed(2020)
n <- dim(features)[1]
n.fold <- round(n/K, 0)
s <- sample(n) %% K + 1
cv.error <- rep(NA, K)
cv.AUC <- rep(NA, K)
feature_train_cv <- features[s != i,]
feature_test_cv <- features[s == i,]
label_train_cv <- labels[s != i]
label_test_cv <- labels[s == i]
## sample reweighting
weight_train_cv <- rep(NA, length(label_train_cv))
weight_test_cv <- rep(NA, length(label_test_cv))
for (v in unique(labels)){
weight_train_cv[label_train_cv == v] = 0.5 * length(label_train_cv) / length(label_train_cv[label_train_cv == v])
weight_test_cv[label_test_cv == v] = 0.5 * length(label_test_cv) / length(label_test_cv[label_test_cv == v])
}
## model training
if (reweight){
model_train <- train(feature_train_cv, label_train_cv, w = weight_train_cv, cp, maxdepth)
} else {
model_train <- train(feature_train_cv, label_train_cv, w = NULL, cp, maxdepth)
}
prob_pred <- test(model_train, feature_test_cv, pred.type = "prob")
label_pred <- ifelse(prob_pred >= 0.5, 1, 0)[, 2] # index here
prob_pred
## make predictions
prob_pred <- test(model_train, feature_test_cv, pred.type = "prob")[, 1] # index here
prob_pred
label_pred <- ifelse(prob_pred >= 0.5, 1, 0)[, 1] # index here
label_pred <- ifelse(prob_pred >= 0.5, 1, 0) # index here
label_pred
label_pred == label_test_cv
table(label_pred == label_test_cv)
1 - sum(weight_test_cv * (label_pred == label_test_cv)) / sum(weight_test_cv)
cv.error[i] <- 1 - sum(weight_test_cv * (label_pred == label_test_cv)) / sum(weight_test_cv)
tpr.fpr <- WeightedROC(prob_pred, label_test_cv, weight_test_cv)
cv.AUC[i] <- WeightedAUC(tpr.fpr)
cv.error
cv.AUC
label_pred
head(label_pred)
head(label_test_cv)
table(label_pred == label_test_cv)
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(0.01, 0.05, 0.1, 0.2, 0.3),
maxdepth = c(5, 10, 15, 20, 25, 30)
)
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
colnames(res_cv_trees_high) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
# look at top 5 models with highest AUC
cv_results_trees_high[order(cv_results_trees_high$mean_AUC, decreasing = TRUE), ][1:5, ]
cv_results_trees_high
?rpart
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
maxdepth = c(5, 10, 15, 20, 25, 30)
)
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1),
maxdepth = c(5, 10, 15, 20, 25, 30)
)
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
label_train_low = df_low[, 2]
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
# create data frame to organize results
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
colnames(res_cv_trees_high) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
# look at top 5 models with highest AUC
cv_results_trees_high[order(cv_results_trees_high$mean_AUC, decreasing = TRUE), ][1:5, ]
cv_results_trees_high
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(0.001, 0.005, 0.01, 0.05, 0.1, 0.15),
maxdepth = c(5, 10, 15, 20, 25, 30)
)
source("../lib/train_trees.R")
source("../lib/cross_validation_trees.R")
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
res_cv_trees_high
if(run.cv.trees_low){
res_cv_trees_low <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_low[i,] <- cv.function(features = feature_train_low, labels = label_train_low,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_low, file="../output/res_cv_trees_low.RData")
}
}else{
load("../output/res_cv_trees_low.RData")
}
run.cv.trees_low <- TRUE # run cross-validation on the training set for trees on low dim data
run.train.trees_low <- TRUE # run evaluation on entire train set on low dim data
run.test.trees_low <- TRUE # run evaluation on an independent test set on low dim data
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
if(run.cv.trees_low){
res_cv_trees_low <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_low[i,] <- cv.function(features = feature_train_low, labels = label_train_low,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_low, file="../output/res_cv_trees_low.RData")
}
}else{
load("../output/res_cv_trees_low.RData")
}
# create data frame to organize results
res_cv_trees_low <- as.data.frame(res_cv_trees_low)
colnames(res_cv_trees_low) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_low = data.frame(hyper_grid_trees, res_cv_trees_low)
cv_results_trees_low
set.seed(5243)
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file="../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
set.seed(5243)
if(run.cv.trees_low){
res_cv_trees_low <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], ", max depth = ", hyper_grid_trees$maxdepth[i],"\n", sep = "")
res_cv_trees_low[i,] <- cv.function(features = feature_train_low, labels = label_train_low,
cp = hyper_grid_trees$cp[i],
maxdepth = hyper_grid_trees$maxdepth[i],
K, reweight = sample.reweight)
save(res_cv_trees_low, file="../output/res_cv_trees_low.RData")
}
}else{
load("../output/res_cv_trees_low.RData")
}
# create data frame to organize results
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
cv_results_trees_high
# create data frame to organize results
res_cv_trees_low <- as.data.frame(res_cv_trees_low)
colnames(res_cv_trees_low) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_low = data.frame(hyper_grid_trees, res_cv_trees_low)
cv_results_trees_low
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: wd
setwd("~/GitHub/Fall2020-Project4-group-4/doc")
# Chunk 3
packages.used <- c("dplyr", "ggplot2", "WeightedROC", "rpart")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(dplyr)
library(ggplot2)
library(WeightedROC)
library(rpart)
# Chunk 4
df_high <- read.csv("../data/highDim_dataset.csv")
df_low <- read.csv("../data/lowDim_dataset.csv")
# Chunk 5
K <- 5  # number of CV folds
sample.reweight <- TRUE # run sample reweighting in model training
run.cv.trees_high <- TRUE # run cross-validation on the training set for trees on high dim data
run.cv.trees_low <- TRUE # run cross-validation on the training set for trees on low dim data
# Chunk 6
# hyperparameters for trees
hyper_grid_trees <- expand.grid(
cp = c(2^(0), 2^(-1), 2^(-2), 2^(-3), 2^(-4),
2^(-5), 2^(-6), 2^(-7), 2^(-8), 2^(-9),
2^(-10), 2^(-11), 2^(-12), 2^(-13), 2^(-14),
2^(-15), 2^(-16), 2^(-17), 0, -2^(0))
)
# Chunk 7: loadlib_trees
source("../lib/train_trees.R")
source("../lib/test_trees.R")
source("../lib/cross_validation_trees.R")
# Chunk 8: features
# features are the predictors: V1 - Vp
# column 1 is the response Y
# column 2 is the treatment A
feature_train_high = df_high[, -1:-2]
label_train_high = df_high[, 2]
feature_train_low = df_low[, -1:-2]
label_train_low = df_low[, 2]
# Chunk 9: runcv_trees_high
set.seed(5243)
if(run.cv.trees_high){
res_cv_trees_high <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], "\n", sep = "")
res_cv_trees_high[i,] <- cv.function(features = feature_train_high, labels = label_train_high,
cp = hyper_grid_trees$cp[i],
K, reweight = sample.reweight)
save(res_cv_trees_high, file = "../output/res_cv_trees_high.RData")
}
}else{
load("../output/res_cv_trees_high.RData")
}
# Chunk 10: runcv_trees_low
set.seed(5243)
if(run.cv.trees_low){
res_cv_trees_low <- matrix(0, nrow = nrow(hyper_grid_trees), ncol = 4)
for(i in 1:nrow(hyper_grid_trees)){
cat("complexity = ", hyper_grid_trees$cp[i], "\n", sep = "")
res_cv_trees_low[i,] <- cv.function(features = feature_train_low, labels = label_train_low,
cp = hyper_grid_trees$cp[i],
K, reweight = sample.reweight)
save(res_cv_trees_low, file="../output/res_cv_trees_low.RData")
}
}else{
load("../output/res_cv_trees_low.RData")
}
# Chunk 11
# create data frame to organize results
res_cv_trees_high <- as.data.frame(res_cv_trees_high)
colnames(res_cv_trees_high) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_high = data.frame(hyper_grid_trees, res_cv_trees_high)
# look at top 5 models with highest AUC
cv_results_trees_high[order(cv_results_trees_high$mean_AUC, decreasing = TRUE), ][1:5, ]
# cross validation results for high dimensional data: mean_error
cv_results_trees_high %>% ggplot(aes(x = as.factor(cp), y = mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# cross validation results for high dimensional data: mean_AUC
cv_results_trees_high %>% ggplot(aes(x = as.factor(cp), y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
cv_results_trees_high
best_cp_high <- cv_results_trees_high$cp[cv_results_trees_high$mean_AUC == max(cv_results_trees_high$mean_AUC]
cv_results_trees_high$mean_AUC == max(cv_results_trees_high$mean_AUC
_
cv_results_trees_high$cp[cv_results_trees_high$mean_AUC ==
max(cv_results_trees_high$mean_AUC)]
best_cp_high <- cv_results_trees_high$cp[cv_results_trees_high$mean_AUC ==
max(cv_results_trees_high$mean_AUC)]
best_cp_high
# create data frame to organize results
res_cv_trees_low <- as.data.frame(res_cv_trees_low)
colnames(res_cv_trees_low) <- c("mean_error", "sd_error", "mean_AUC", "sd_AUC")
cv_results_trees_low = data.frame(hyper_grid_trees, res_cv_trees_low)
# look at top 5 models with lowest AUC
cv_results_trees_low[order(cv_results_trees_low$mean_AUC, decreasing = TRUE), ][1:5, ]
# cross validation results for low dimensional data: mean_error
cv_results_trees_low %>% ggplot(aes(x = as.factor(cp), y = mean_error,
ymin = mean_error - sd_error, ymax = mean_error + sd_error)) +
geom_crossbar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# cross validation results for low dimensional data: mean_AUC
cv_results_trees_low %>% ggplot(aes(x = as.factor(cp), y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# cross validation results for low dimensional data: mean_AUC
cv_results_trees_low %>% ggplot(aes(x = as.factor(cp), y = mean_AUC,
ymin = mean_AUC - sd_AUC, ymax = mean_AUC + sd_AUC)) +
geom_crossbar() + theme(axis.text.x = element_text(angle = 90, hjust = 1))
cv_results_trees_low$cp[cv_results_trees_low$mean_AUC ==
max(cv_results_trees_low$mean_AUC)]
best_cp_low <- cv_results_trees_low$cp[cv_results_trees_low$mean_AUC ==
max(cv_results_trees_low$mean_AUC)]
best_cp_low
# look at top 5 models with lowest AUC
cv_results_trees_low[order(cv_results_trees_low$mean_AUC, decreasing = TRUE), ][1:5, ]
