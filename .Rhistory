knitr::opts_chunk$set(echo = F)
df<-read.csv("JPM.csv")
names(df)
dim(df)
colSums(is.na(df)==T)
summary(df)
df[which.max(df$Open),]
df[which.min(df$Open),]
n<-nrow(df)
df$Open<-c(0,log(df$Open[-1]/df$Open[-n]))
summary(df)
df[which.max(df$Open),]
df[which.min(df$Open),]
library(tidyverse)
library(forecast)
n<-nrow(df)
jpm<-log(df$Open[-1]/df$Open[-n])%>%na.omit()
plot.ts(jpm,main="Contains Outliers")
jpm<-jpm[!jpm %in% boxplot.stats(jpm)$out]
#length(jpm)
#min(jpm)
#max(jpm)
plot.ts(jpm,main="Without Outliers")
length(jpm)
library(tidyverse)
library(forecast)
df<-read.csv("JPM.csv")%>%na.omit()
n<-nrow(df)
jpm<-log(df$Open[-1]/df$Open[-n])
plot.ts(jpm,main="Contains Outliers")
jpm<-jpm[!jpm %in% boxplot.stats(jpm)$out]
#length(jpm)
#min(jpm)
#max(jpm)
plot.ts(jpm,main="Without Outliers")
jpm<-log(df$Open[-1]/df$Open[-n])
n
jpm<-log(df$Open[-1]/df$Open[-n])
length(jpm)
plot.ts(jpm,main="Contains Outliers")
jpm<-jpm[!jpm %in% boxplot.stats(jpm)$out]
length(jpm)
plot.ts(jpm,main="Without Outliers")
par(mfrow=c(1,2))
acf(jpm,52)
pacf(jpm,52)
n<-length(jpm)-1
record_AIC = matrix(0,5,5)
rownames(record_AIC) = c('p=0', 'p=1', 'p=2', 'p=3', 'p=4')
colnames(record_AIC) = c('q=0', 'q=1', 'q=2', 'q=3', 'q=4')
record_BIC = matrix(0,5,5)
rownames(record_BIC) = c('p=0', 'p=1', 'p=2', 'p=3', 'p=4')
colnames(record_BIC) = c('q=0', 'q=1', 'q=2', 'q=3', 'q=4')
record_AICC =matrix(0,5,5)
rownames(record_AICC) = c('p=0', 'p=1', 'p=2', 'p=3', 'p=4')
colnames(record_AICC) = c('q=0', 'q=1', 'q=2', 'q=3', 'q=4')
for(p in 0:4){
for(q in 0:4){
m <-arima(jpm, order = c(p,0,q), include.mean = T)
record_AIC[p+1,q+1] <- m$aic
record_BIC[p+1,q+1] <- -2*m$loglik + (p+q+2)*log(n)
record_AICC[p+1,q+1] <- -2*m$loglik + 2*(p+q+2)*n/(n-p-q-3)
}
}
#which(record_AIC==min(record_AIC), arr.ind = TRUE)
knitr::kable(record_AIC,caption = 'AIC')
#which(record_BIC==min(record_BIC), arr.ind = TRUE)
#which(record_AICC==min(record_AICC), arr.ind = TRUE)
knitr::kable(record_AICC,caption = 'AICC')
knitr::kable(record_BIC,caption = 'BIC')
#fit
fit1<-arima(jpm, order = c(1,0,1), include.mean = TRUE)
fit2<-arima(jpm, order = c(1,0,1), include.mean = F)
knitr::kable(fit1$coef,col.names=c(),caption = "Coefficients of ARMA(1,1) with Intercept")
#confint(fit1)
knitr::kable(fit2$coef,col.names=c(),caption = "Coefficients of ARMA(1,1) without Intercept")
checkresiduals(fit2)
shapiro.test(fit2$residuals)
pred<-predict(fit2,n.ahead=1)$pred
exp(pred)*df$Open[1058]
acf(jpm^2)
library(fGarch)
library(quantmod)
#fit3=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
#knitr::kable(fit3@fit3$coef,col.names = "Coefficients")
library(fGarch)
library(quantmod)
#fit3=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
#knitr::kable(fit3@fit3$coef,col.names = "Coefficients")
fit3=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit3@fit3$coef,col.names = "Coefficients")
knitr::kable(fit3$coef,col.names = "Coefficients")
fit3
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients")
library(fGarch)
library(quantmod)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
fit
plot.ts(fit@sigma.t)
library(fGarch)
library(quantmod)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
plot.ts(fit@sigma.t)
library(rugarch)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model = "gjrGARCH"),
distribution.model = "sstd")
garchfit <- ugarchfit(data = jpm, spec = garchspec)
garchfit
plot.ts(garchfit@fit$sigma)
plot.ts(fit@sigma.t)
library(fGarch)
library(quantmod)
library(rugarch)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
plot.ts(fit@sigma.t)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model = "gjrGARCH"),
distribution.model = "sstd")
garchfit <- ugarchfit(data = jpm, spec = garchspec)
plot.ts(garchfit@fit$sigma)
fit=garchFit(formula=~arma(0,4)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
plot.ts(fit@sigma.t)
library(fGarch)
library(quantmod)
library(rugarch)
fit=garchFit(formula=~arma(0,4)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
plot.ts(fit@sigma.t)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model = "gjrGARCH"),
distribution.model = "sstd")
garchfit <- ugarchfit(data = jpm, spec = garchspec)
plot.ts(garchfit@fit$sigma)
library(fGarch)
library(quantmod)
library(rugarch)
fit=garchFit(formula=~arma(1,0)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
plot.ts(fit@sigma.t)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model = "gjrGARCH"),
distribution.model = "sstd")
garchfit <- ugarchfit(data = jpm, spec = garchspec)
plot.ts(garchfit@fit$sigma)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(model = "gjrGARCH"),
distribution.model = "norm")
garchfit <- ugarchfit(data = jpm, spec = garchspec)
plot.ts(garchfit@fit$sigma)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
plot.ts(fit@sigma.t)
plot.ts(fit@sigma.t^2)
std_residual<-fit@residuals/fit@sigma.t
library(fGarch)
library(quantmod)
library(rugarch)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
par(mfrow=c(2,2))
plot.ts(fit@sigma.t^2)
std_residual<-fit@residuals/fit@sigma.t
acf(std_residual)
acf(abs(std_residual))
acf(std_residual^2)
library(fGarch)
library(quantmod)
library(rugarch)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
par(mfrow=c(2,2))
plot.ts(fit@sigma.t^2)
std_residual<-fit@residuals/fit@sigma.t
acf(std_residual)
acf(abs(std_residual))
acf(std_residual^2)
library(fGarch)
library(quantmod)
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
par(mfrow=c(2,2))
plot.ts(fit@sigma.t^2)
std_residual<-fit@residuals/fit@sigma.t
acf(std_residual)
acf(abs(std_residual))
acf(std_residual^2)
confint(fit@fit$coef)
confint(fit@fitted)
confint(fit@fit)
confint(fit@fit$coef)
fit
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,include.mean = F,trace=F,cond.dist='norm')
fit=garchFit(formula=~arma(1,1)+garch(1,1),data=jpm,include.mean = F,trace=F,cond.dist='norm')
knitr::kable(fit@fit$coef,col.names = "Coefficients",caption = "Coefficients of ARMA(1,1)-GARCH(1,1)")
fit
par(mfrow=c(2,2))
plot.ts(fit@sigma.t^2)
std_residual<-fit@residuals/fit@sigma.t
acf(std_residual)
acf(abs(std_residual))
acf(std_residual^2)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/Charlie/Documents/GitHub/Fall2020-Project4-group-4")
setwd("C:/Users/wuyam/OneDrive/文档/GitHub、Fall2020-Project4-group-4")
setwd("C:/Users/wuyam/OneDrive/文档/GitHub/Fall2020-Project4-group-4")
packages.used <- c("dplyr", "ggplot2", "WeightedROC", "rpart", "rpart.plot")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used, intersect(installed.packages()[,1], packages.used))
# install additional packages
if(length(packages.needed) > 0){
install.packages(packages.needed, dependencies = TRUE)
}
library(dplyr)
library(ggplot2)
library(WeightedROC)
library(rpart)
library(rpart.plot)
library(base)
df_high <- read.csv("../data/highDim_dataset.csv")
df_low <- read.csv("../data/lowDim_dataset.csv")
